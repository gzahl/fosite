!-------------------------------------------------------------------------!
! basic type used in all other types
!-------------------------------------------------------------------------!
TYPE Common_TYP
   PRIVATE
   INTEGER          :: type                    ! identifier for object    !
   CHARACTER(LEN=32):: name                    ! information string       !
   INTEGER          :: error                   ! error code               !
   LOGICAL          :: init = .FALSE.          ! init status              !
   INTEGER, POINTER :: myrank                  ! rank of parallel process !
   INTEGER, POINTER :: ppnum                   ! number of par. processes !
   LOGICAL, POINTER :: parinit                 ! init status of par. procs!


!-------------------------------------------------------------------------!
! boundary conditions
!-------------------------------------------------------------------------!
TYPE Boundary_TYP
   TYPE(Common_TYP)  :: condition        ! outflow, reflect, periodic, .. !
   TYPE(Common_TYP)  :: direction        ! west, east, south, north       !
   LOGICAL           :: first_call       ! used in far-field bc           ! 
   INTEGER           :: IMID, JMID       ! indices of cells in the middle !
   INTEGER           :: nohdim           ! dimension of Noh problem       !
   INTEGER, DIMENSION(:,:), POINTER &
                     :: cbtype           ! custom boundary condition type !
   REAL, DIMENSION(:,:,:), POINTER &     ! boundary data for fixed and    !
                     :: data             !   reflecting boundary cond.    !
   REAL, DIMENSION(:,:), POINTER &       ! inverse distance to center     !
                     :: invr             !   used for Noh boundary        !
   REAL, DIMENSION(:,:,:), POINTER &     ! Riemann invariants for far-    !
                     :: Rinv             !   field boundary conditions    !
   REAL, DIMENSION(:,:), POINTER &       ! temporary Riemann invariants   !
                     :: Rtmp             !   for far-field bound. cond.   !
   REAL, DIMENSION(:), POINTER &         ! storage for far-field boundary !
                     :: cs,cs2gam,vn,s   !   conditions                   !
   LOGICAL, DIMENSION(:), POINTER  &
                     :: reflX,reflY      ! mask arrays for reflecting and !
   LOGICAL, DIMENSION(:,:), POINTER &    !   fixed boundaries             !
                     :: fixed
#ifdef PARALLEL
   REAL, DIMENSION(:,:,:), POINTER &     ! send and receive buffer for    !
        :: sendbuf,recvbuf               ! boundary data                  !
#endif


!-------------------------------------------------------------------------!
! physical constants in accordance with the system of units
!-------------------------------------------------------------------------!
TYPE Constants_TYP
   TYPE(Common_TYP) :: units                   ! SI, natural, etc.        !
   ! some physical constants
   DOUBLE PRECISION :: C                       ! light speed              !
   DOUBLE PRECISION :: GN                      ! Newtons grav. constant   !
   DOUBLE PRECISION :: KB                      ! Boltzmann constant       !
   DOUBLE PRECISION :: NA                      ! Avogadro constant        !
   DOUBLE PRECISION :: SB                      ! Stefan-Boltzmann const.  !
   DOUBLE PRECISION :: RG                      ! gas constant             !
   DOUBLE PRECISION :: KE                      ! electr. scat. opacity    !
   ! factors for convertion from SI to other units
   DOUBLE PRECISION :: cf_time                 ! time scale               !
   DOUBLE PRECISION :: cf_mass                 ! mass scale               !
   DOUBLE PRECISION :: cf_momentum             ! momentum scale           !
   DOUBLE PRECISION :: cf_energy               ! energy scale             !
   DOUBLE PRECISION :: cf_power                ! power scale              !
   DOUBLE PRECISION :: cf_temperature          ! temperature scale        !
   DOUBLE PRECISION :: cf_density              ! density scale            !
   DOUBLE PRECISION :: cf_opacity              ! opacity scale            !


!-------------------------------------------------------------------------!
! reconstruction of cell face data
!-------------------------------------------------------------------------!
TYPE Reconstruction_TYP
   TYPE(Common_TYP) :: order                   ! constant, linear, ...    !
   TYPE(Common_TYP) :: limiter                 ! limiter function         !
   LOGICAL          :: primcons                ! true if primitive        !
   REAL             :: limiter_param           ! limiter parameter        !
   REAL, DIMENSION(:,:,:), POINTER &
                    :: xslopes,yslopes         ! limited slopes           !


!-------------------------------------------------------------------------!
! numerical fluxes
!-------------------------------------------------------------------------!
TYPE Fluxes_TYP
   TYPE(Common_TYP) :: quadrule                ! midpoint,trapezoidal..   !
   TYPE(Reconstruction_TYP) :: Reconstruction  ! store recon. settings    !
   REAL, DIMENSION(:,:,:,:), POINTER &         ! primitive and conservat. !
                    :: prim,cons               !    states                !
   REAL, DIMENSION(:,:,:,:), POINTER &         ! reconstructed states:
                    :: rstates                 !    prim or cons          !
   REAL, DIMENSION(:,:,:,:), POINTER &
                    :: pfluxes,qfluxes         ! physical fluxes          !
   REAL, DIMENSION(:,:,:), POINTER &
                    :: temp1,temp2,temp3,temp4 ! temporary storage        !
   REAL, DIMENSION(:,:,:), POINTER &           ! boundary fluxes          !
                    :: bxflux,byflux,bxfold,byfold


!-------------------------------------------------------------------------!
! geometry of the mesh
!-------------------------------------------------------------------------!
TYPE Geometry_TYP
   TYPE(Common_TYP) :: coordsys                ! cartesian, polar, etc.   !
   REAL             :: geoparam                ! geometry parameter       !


!-------------------------------------------------------------------------!
! selection type for masking arrays
!-------------------------------------------------------------------------!
TYPE Selection_TYP
   INTEGER                   :: IMIN,IMAX      ! selection in x-direction !
   INTEGER                   :: JMIN,JMAX      ! selection in y-direction !
   LOGICAL, POINTER          :: mask(:,:)      ! optional selection mask  !            


!-------------------------------------------------------------------------!
! mesh properties
!-------------------------------------------------------------------------!
TYPE Mesh_TYP
   TYPE(Common_TYP) :: mtype                   ! mesh type                !
   TYPE(Geometry_TYP) :: Geometry              ! geometrical properties   !
   INTEGER          :: GNUM                    ! num. ghost cells         !
   INTEGER          :: INUM,JNUM               ! resolution               !
   INTEGER          :: IMIN,IMAX               ! min. & max. index in x-  !
   INTEGER          :: JMIN,JMAX               ! and y-direction          !
   INTEGER          :: IGMIN,IGMAX             ! same with ghost cells    !
   INTEGER          :: JGMIN,JGMAX             !                          !
#ifdef PARALLEL
   INTEGER                   :: MAXINUM,MAXJNUM ! max. of local INUM,JNUM !
   INTEGER                   :: comm_cart       ! cartesian communicator  !
   INTEGER, DIMENSION(4)     :: comm_boundaries ! comm. for bound. procs. !
   INTEGER, DIMENSION(4)     :: rank0_boundaries! map rank0 -> world rank !
   INTEGER, DIMENSION(4)     :: neighbor        ! ranks of neighbor proc. !
   INTEGER, DIMENSION(NDIMS) :: dims            ! dimensions of cart comm !
   INTEGER, DIMENSION(NDIMS) :: mycoords        ! par. proc coordinates   !
#endif
   REAL             :: xmin, xmax              ! comput. domain in x-     !
   REAL             :: ymin, ymax              ! and y-direction          !
   REAL             :: dx,dy                   ! width of cells in x-&    !
   REAL             :: invdx, invdy            ! y-direction; inverse     !
   REAL, POINTER    :: center(:,:,:)           ! cell geometr. centers    !
   REAL, POINTER    :: bcenter(:,:,:)          ! cell bary centers        !
   REAL, POINTER    :: bccart(:,:,:)           ! cartesian bary centers   !
   REAL, POINTER    :: fpos(:,:,:,:)           ! face centered positions  !
   REAL, POINTER    :: cpos(:,:,:,:)           ! corner positions         !
   REAL, POINTER    :: cpcart(:,:,:,:)         ! cartesian corner pos.    !
   REAL, POINTER    :: fhx(:,:,:)              ! face centered scale      !
   REAL, POINTER    :: fhy(:,:,:)              !  factors                 !
   REAL, POINTER    :: fhz(:,:,:)              !                          !
   REAL, POINTER    :: chx(:,:,:)              ! corner scale factors     !
   REAL, POINTER    :: chy(:,:,:)              !                          !
   REAL, POINTER    :: chz(:,:,:)              !                          !
   REAL, POINTER    :: bhx(:,:)                ! bary center scale        !
   REAL, POINTER    :: bhy(:,:)                !  factors                 !
   REAL, POINTER    :: bhz(:,:)                !                          !
   REAL, POINTER    :: cyxy(:,:,:)             ! commutator coefficients  !
   REAL, POINTER    :: cxyx(:,:,:)             ! for geometrical sources  !
   REAL, POINTER    :: czxz(:,:,:)
   REAL, POINTER    :: czyz(:,:,:)
   REAL, POINTER    :: sqrtg(:,:)              ! sqrt(det(g_ij))          !
   REAL, POINTER    :: weights(:,:,:,:)        ! interpolation weights    !
   REAL, POINTER    :: dlx(:,:)                ! line elements            !
   REAL, POINTER    :: dly(:,:)                !   at cell centers        !
   REAL, POINTER    :: dAx(:,:,:)              ! surface elements         !
   REAL, POINTER    :: dAy(:,:,:)              !   on cell faces          !
   REAL, POINTER    :: dAxdy(:,:,:)            ! surface elements divided !
   REAL, POINTER    :: dAydx(:,:,:)            !   by dx or dy            !
   REAL, POINTER    :: volume(:,:)             ! cell volumes             !
   REAL, POINTER    :: dxdV(:,:)               ! inverse volume elements  !
   REAL, POINTER    :: dydV(:,:)               ! multiplied with dx or dy !


!-------------------------------------------------------------------------!
! structure to describe array data for output
!-------------------------------------------------------------------------!
TYPE PhysicsStruc_TYP
   CHARACTER(LEN=16)      :: name              ! descriptive name         !
   INTEGER                :: pos               ! array index              !
   INTEGER                :: dim               ! dimensionality and       !
   INTEGER                :: rank              !   rank of the data       !


!-------------------------------------------------------------------------!
! physical (advection) problem under consideration
!-------------------------------------------------------------------------!
TYPE Physics_TYP
   TYPE(Common_TYP)  :: advproblem             ! advection problem        !
   TYPE(Constants_TYP) :: constants            ! physical constants       !
   TYPE(Sources_TYP), POINTER :: sources       ! list of source terms     !
   REAL              :: gamma                  ! ratio of spec. heats     !
   REAL              :: mu                     ! mean molecular weight    !
   REAL              :: csiso                  ! isothermal sound speed   !
   REAL              :: rhomin                 ! density minimum          !
   REAL              :: pmin                   ! pressure minimum         !
   REAL              :: dpmax                  ! for time step control    !
   INTEGER           :: VNUM                   ! number of variables      !
   INTEGER           :: DENSITY                ! array indices for        !
   INTEGER           :: PRESSURE, ENERGY       !    primitive and         !
   INTEGER           :: XVELOCITY, XMOMENTUM   !    conservative          !
   INTEGER           :: YVELOCITY, YMOMENTUM   !    variables             !
   INTEGER           :: ZVELOCITY, ZMOMENTUM   !                          !
   TYPE(PhysicsStruc_TYP),DIMENSION(:), POINTER &
                     :: structure              ! structure of variables   !
   INTEGER           :: nstruc                 ! number of structure elem.!
   CHARACTER(LEN=16), DIMENSION(:), POINTER &
                     :: pvarname,cvarname      ! names of variables       !
   CHARACTER(LEN=1), DIMENSION(:), POINTER &
                     :: errormap               ! mapping of error to char !
   REAL, DIMENSION(:,:,:), POINTER &
                     :: csound                 ! sound speed              !
   REAL, DIMENSION(:,:), POINTER &
                     :: amin, amax, bmin, bmax ! wave speeds              !
   REAL, DIMENSION(:,:,:), POINTER &
                     :: tmin, tmax             ! temporary storage        !
   REAL, DIMENSION(:,:,:,:), POINTER :: fcent  ! centrifugal force        !


!-------------------------------------------------------------------------!
! various source terms, e.g. gravitation, viscosity
!-------------------------------------------------------------------------!
TYPE Sources_TYP
   TYPE(Common_TYP)               :: sourcetype   ! type of source term   !
   TYPE(Sources_TYP), POINTER     :: next => null() ! next source in list !
   TYPE(Poisson_TYP)              :: poisson      ! poisson problem       !
   TYPE(Common_TYP)               :: potential    ! newton or wiita       !
   TYPE(Common_TYP)               :: viscosity    ! molecular,alpha,beta  !
   REAL                           :: time         ! simulation time       !
   REAL                           :: mass         ! mass of point source  !
   REAL                           :: mdot         ! disk accretion rate   !
   REAL                           :: dynconst,bulkconst ! viscosity const.!
   REAL                           :: cvis         ! viscous Courant no.   !
   INTEGER                        :: outbound     ! outflow boundary      !
   REAL, DIMENSION(:,:,:), POINTER:: accel,accart ! acceleration          !
   REAL, DIMENSION(:,:), POINTER  :: radius       ! distance to origin    !
   REAL, DIMENSION(:,:), POINTER  :: invr         ! 1./radius             !
   REAL, DIMENSION(:,:,:), POINTER:: gxr3         ! = GN*x/radius**3      !
   REAL, DIMENSION(:,:), POINTER  :: cellmass     ! rho*dV                !
   REAL, DIMENSION(:,:), POINTER  :: Qcool        ! cooling sources       !
   REAL, DIMENSION(:,:), POINTER  :: dynvis, &    ! dynamic, kinematic &  !
                                   kinvis,bulkvis !    bulk viscosity     !
   REAL, DIMENSION(:,:), POINTER  :: btxx,btyy,&  ! components of the     !
        btzz,btxy,btxz,btyz                       !    stress tensor      !


!-------------------------------------------------------------------------!
! multigrid poisson solver grid structure
!-------------------------------------------------------------------------!
TYPE Grid_TYP                    ! data type for multigrid poisson solver !
  REAL, DIMENSION(:,:), POINTER   :: u,rho         ! DELTA u = rho        !
  REAL, DIMENSION(:,:), POINTER   :: a,da,b,db,c   !    some geometric    !
  REAL, DIMENSION(:,:), POINTER   :: invc,d        !      values          !
  REAL, DIMENSION(:,:), POINTER   :: vol,bhx,bhy   ! volume, scale factors!
  REAL, DIMENSION(:,:), POINTER   :: tmp           ! temp
  REAL, DIMENSION(:,:,:), POINTER :: bccart,curv   ! cart. and curv. coord.!
  REAL, DIMENSION(:,:,:), POINTER :: tri           ! coefficients for block-iteration !
  INTEGER                         :: ni,nj         ! resolution            !
  INTEGER, DIMENSION(:,:), POINTER :: ij2k, k2ij   ! index field for bound.!
  REAL                            :: hi,hj         ! width of cells; square!  
  REAL                            :: invhi2,invhj2 !     of inverse        !


!-------------------------------------------------------------------------!
! poisson solver data structure
!-------------------------------------------------------------------------!
TYPE Poisson_TYP
  TYPE(Common_TYP)                :: poissontype   ! type of source term   !
  TYPE(Multipole_TYP)             :: multipole     ! multipole expansion   !
  TYPE(Grid_TYP), POINTER         :: grid(:)       ! coarse grids          !
  REAL                            :: MAXRESIDNORM  ! max error of residuum !
  INTEGER                         :: RELAXTYPE     ! type of relaxation method !
  INTEGER                         :: NGRID         ! number of grids       !
  INTEGER                         :: NPRE,NPOST    ! pre and post smoothing!
  INTEGER                         :: NMAXCYCLE     ! max of iterations     !
  INTEGER                         :: MINRES        ! min resolution        !
  REAL, DIMENSION(:,:,:), POINTER :: accel         ! acceleration          !
  REAL, DIMENSION(:,:), POINTER   :: phi           ! potential             !
  INTEGER, DIMENSION(4)           :: Boundary      ! boundary condition    !
  LOGICAL                         :: DIRICHLET     ! true if min ONE bound.!
                                                   !   is set as dirichlet !

!-------------------------------------------------------------------------!
! type for geometrical factors used in multipole expansion
!-------------------------------------------------------------------------!
TYPE GFactors_TYP
   TYPE(Selection_TYP) :: range(2)              ! array selection indices !
   REAL, DIMENSION(:,:,:,:), POINTER :: data    ! pointer on data array   !


!-------------------------------------------------------------------------!
! multipole expansion data structure
!-------------------------------------------------------------------------!
TYPE Multipole_TYP
     TYPE(Common_TYP) :: exptype               ! spherical or cylindrical !
     TYPE(Selection_TYP) :: iregion            ! input region             !
     TYPE(Selection_TYP), DIMENSION(:), POINTER &
                      :: oregion               ! output regions           !
     TYPE(GFactors_TYP), DIMENSION(:), POINTER &
                      :: gfactors              ! geometrical factors      !
     INTEGER          :: ORDER                 ! highest multipole moment !
     INTEGER          :: IMIN,IMAX,JMIN,JMAX   ! density and potential    !
                                               !   array dimensions       !
     LOGICAL          :: SPHERICAL             ! = .TRUE. if radius is    !
                                               ! independent of pol. angle!
     REAL, DIMENSION(:,:,:), POINTER &
                      :: coords,&              ! curvilinear coords       !
                         Pl,&                  ! Legendre Polynomomials   !
                         PldV,&                ! Legendre Polyn. * volume !
                         wmass,&               ! weighted cell masses     !
                         temp                  ! temporary storage        !
     REAL, DIMENSION(:,:), POINTER &
                      :: radius,&              ! radial coordinate        !
                         invr, &               ! inverse radius           !
                         invsqrtr, &           ! 1/(square root of radius)!
                         volume                ! cell volume field        !


!-------------------------------------------------------------------------!
! method for time marching
!-------------------------------------------------------------------------!
TYPE Timedisc_TYP
   TYPE(Common_TYP) :: odesolver                  ! Runge-Kutta, etc.     !
   TYPE(Boundary_TYP), DIMENSION(4) :: Boundary   ! one for each boundary !
   REAL             :: order                      ! time order            !
   REAL             :: cfl                        ! Courant number        !
   REAL             :: dt                         ! actual time step      !
   REAL             :: dtold                      ! last time step        !
   REAL             :: dtmin                      ! min dt of act. calc   !
   REAL             :: time                       ! actual time           !
   REAL             :: stoptime                   ! end of simulation     !
   REAL             :: dtlimit                    ! lower limit for dt    !
   REAL             :: tol_rel                    ! rel. error tolerance  !
   INTEGER          :: maxiter                    ! maximal iterations    !
   INTEGER          :: n_adj                      ! num. of adjustments   !
   INTEGER          :: m                          ! cal steps in emb. RK  !
   REAL, DIMENSION(:), POINTER      :: tol_abs    ! abs. error tolerance  !
   REAL, DIMENSION(:,:,:), POINTER  :: pvar, cvar ! prim/cons vars        !
   REAL, DIMENSION(:,:,:), POINTER  :: pold, cold ! old prim/cons vars    !
   REAL, DIMENSION(:,:,:), POINTER  :: ptmp,ctmp  ! temporary cvars       !
   REAL, DIMENSION(:,:,:,:), POINTER:: coeff      ! coefficents           !
   REAL, DIMENSION(:), POINTER      :: A1,A2,a    ! needed by             !
   REAL, DIMENSION(:,:), POINTER    :: b          ! embedded RK           !
   REAL, DIMENSION(:,:,:), POINTER  :: src, &     ! external sources      !
                                       geo_src    ! geometrical sources   !
   REAL, DIMENSION(:,:,:), POINTER  :: rhs, &     ! ODE right hand side   !
                                    bxrhs,byrhs
   REAL, DIMENSION(:,:,:), POINTER :: xflux,yflux ! num. flux func.       !
   REAL, DIMENSION(:,:,:), POINTER :: amax        ! max. wave speeds      !


!-------------------------------------------------------------------------!
! data type for file header data
!-------------------------------------------------------------------------!
  TYPE Header_TYP
     INTEGER, DIMENSION(:), POINTER :: idata    ! integer data            !
     REAL, DIMENSION(:), POINTER    :: rdata    ! real data               !


!-------------------------------------------------------------------------!
! properties of I/O data files
!-------------------------------------------------------------------------!
TYPE FileIO_TYP
   TYPE(Common_TYP) :: format                   ! i/o file format         !
   TYPE(Header_TYP) :: header                   ! file header             !
   CHARACTER(LEN=256)     :: linebuf            ! buffer for character i/o!
   CHARACTER(LEN=FNAMLEN) :: filename           ! file name w/o extension !
   CHARACTER(LEN=FEXTLEN) :: extension          ! file name extension     !
   CHARACTER(LEN=64):: fmtstr                   ! format string           !
   CHARACTER(LEN=64):: linefmt                  ! output line format str. !
   CHARACTER(LEN=12):: realfmt                  ! real format str. for vtk!
   CHARACTER(LEN=14):: endianness               ! endianness str. for vtk !
   INTEGER          :: cols                     ! no. of output columns   !
   INTEGER          :: linelen                  ! length of a line        !
   INTEGER          :: error                    ! i/o error code          !
   INTEGER          :: step                     ! counter for output steps!
   INTEGER          :: count                    ! number of output steps  !
   INTEGER          :: cycles                   ! number of output files  !
   INTEGER          :: dtwall                   ! wall clock time diff.   !
   INTEGER          :: ioffset                  ! VTK appended data offset!
   REAL             :: stoptime                 ! end of data output      !
   REAL             :: time                     ! output time             !
   REAL, DIMENSION(:,:,:), POINTER :: &
                            vtktemp,vtktemp2    ! vtk temp. data          !
   REAL, DIMENSION(:,:,:), POINTER &
                    :: binout                   ! binary data output buf. !
   REAL, DIMENSION(:,:) , POINTER  :: bflux     ! bound. flux data output !               
#ifdef HAVE_NETCDF
   INTEGER          :: ncid                     ! file id                 !
   INTEGER          :: ncfmt                    ! file format             !
   INTEGER          :: rank                     ! 1D or 2D data           !
#endif
#ifdef PARALLEL
   CHARACTER, DIMENSION(:,:), POINTER &
                    :: outbuf                   ! output buffer           !
   INTEGER          :: bufsize                  ! size of output buffer   !
   INTEGER          :: handle                   ! MPI file handle         !
   INTEGER          :: blocknum                 ! no. of blocks in data f.!
   INTEGER          :: basictype                ! data type for points    !
   INTEGER          :: filetype                 ! data type for i/o       !
   INTEGER(KIND=MPI_ADDRESS_KIND) &
                    :: realext,intext           ! data type extent        !
   INTEGER(KIND=MPI_OFFSET_KIND)&
                    :: offset                   ! skip header bytes       !
   INTEGER, DIMENSION(:), POINTER &
                    :: disp                     ! array of displacements  !
   INTEGER, DIMENSION(MPI_STATUS_SIZE) &
                    :: status                   ! MPI i/o status record   !
   LOGICAL          :: sepfiles                 ! one or multiple files   !
#else
   INTEGER          :: unit                     ! i/o unit                !
#endif


!-------------------------------------------------------------------------!
! main data structure for fosite simulations
!-------------------------------------------------------------------------!
TYPE Fosite_TYP
   TYPE(Common_TYP)       :: sim                ! type of simulation      !
   TYPE(Mesh_TYP)         :: Mesh               ! mesh properties         !
   TYPE(Fluxes_TYP)       :: Fluxes             ! numerical fluxes        !
   TYPE(Physics_TYP)      :: Physics            ! advection problem       !
   TYPE(FileIO_TYP)       :: Datafile           ! data output             !
   TYPE(Timedisc_TYP)     :: Timedisc           ! time marching scheme    !
   TYPE(FileIO_TYP)       :: Logfile            ! logfile output          !
   INTEGER                :: iter
   LOGICAL                :: break
   DOUBLE PRECISION       :: wall_time           ! wall clock elapsed time !
   DOUBLE PRECISION       :: log_time            ! time for next log output!
   DOUBLE PRECISION       :: start_time          ! system clock start time !
   DOUBLE PRECISION       :: end_time            ! system clock end time   !
   DOUBLE PRECISION       :: run_time            ! = end_time - start_time !
#ifdef PARALLEL
   INTEGER                :: ierror
   REAL                   :: dt_all              ! min timestep of all     !
                                                 ! processes               ! 
#endif
